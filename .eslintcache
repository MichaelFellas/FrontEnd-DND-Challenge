[{"C:\\Users\\Michael\\Documents\\Job apps\\Coding Assignments\\DnD Spells\\src\\index.js":"1","C:\\Users\\Michael\\Documents\\Job apps\\Coding Assignments\\DnD Spells\\src\\App.js":"2","C:\\Users\\Michael\\Documents\\Job apps\\Coding Assignments\\DnD Spells\\src\\components\\Navbar.js":"3","C:\\Users\\Michael\\Documents\\Job apps\\Coding Assignments\\DnD Spells\\src\\utils\\localStorage.js":"4","C:\\Users\\Michael\\Documents\\Job apps\\Coding Assignments\\DnD Spells\\src\\utils\\API.js":"5","C:\\Users\\Michael\\Documents\\Job apps\\Coding Assignments\\DnD Spells\\src\\pages\\SearchSpells.js":"6","C:\\Users\\Michael\\Documents\\Job apps\\Coding Assignments\\DnD Spells\\src\\pages\\SavedSpells.js":"7"},{"size":266,"mtime":1651573770159,"results":"8","hashOfConfig":"9"},{"size":682,"mtime":1657202107158,"results":"10","hashOfConfig":"9"},{"size":925,"mtime":1657124788653,"results":"11","hashOfConfig":"9"},{"size":875,"mtime":1657180714453,"results":"12","hashOfConfig":"9"},{"size":257,"mtime":1656916491814,"results":"13","hashOfConfig":"9"},{"size":8275,"mtime":1657203415017,"results":"14","hashOfConfig":"9"},{"size":6764,"mtime":1657203160130,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"2lwpz4",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"C:\\Users\\Michael\\Documents\\Job apps\\Coding Assignments\\DnD Spells\\src\\index.js",[],["33","34"],"C:\\Users\\Michael\\Documents\\Job apps\\Coding Assignments\\DnD Spells\\src\\App.js",[],"C:\\Users\\Michael\\Documents\\Job apps\\Coding Assignments\\DnD Spells\\src\\components\\Navbar.js",["35","36","37","38"],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar, Nav, Container, Modal, Tab } from \"react-bootstrap\";\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar className=\"navbarBG\" expand=\"lg\">\n        <Container fluid className=\"navbarCont\">\n          <Navbar.Brand className=\"navbarCont\" as={Link} to=\"/\">\n            <h2>DND SPELLS</h2>\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"navbar\" className=\"navbarCont\" />\n          <Navbar.Collapse id=\"navbar\" className=\"navbarCont\">\n            <Nav className=\"ml-auto navbarCont\">\n              <Nav.Link as={Link} to=\"/saved\">\n                <h4>Saved Spells</h4>\n              </Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","C:\\Users\\Michael\\Documents\\Job apps\\Coding Assignments\\DnD Spells\\src\\utils\\localStorage.js",[],"C:\\Users\\Michael\\Documents\\Job apps\\Coding Assignments\\DnD Spells\\src\\utils\\API.js",[],"C:\\Users\\Michael\\Documents\\Job apps\\Coding Assignments\\DnD Spells\\src\\pages\\SearchSpells.js",[],"C:\\Users\\Michael\\Documents\\Job apps\\Coding Assignments\\DnD Spells\\src\\pages\\SavedSpells.js",["39","40"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n  Row,\n  Col,\n} from \"react-bootstrap\";\n\nimport {\n  saveSpellIndexs,\n  removeSpellIndex,\n  getsavedSpellIndexs,\n} from \"../utils/localStorage\";\nimport { searchDnDAPI } from \"../utils/API\";\n\nconst SavedBooks = () => {\n  const [spells, setSpells] = useState(getsavedSpellIndexs());\n\n  const getUserSpells = async () => {\n    try {\n      const response = await getsavedSpellIndexs();\n      var spellData = [];\n      for (let i = 0; i < response.length; i++) {\n        let data = await searchDnDAPI(response[i]);\n        const items = await data.json();\n\n        let spellClassesArr = await items.classes.map(function (asdasd) {\n          return asdasd.name + \", \";\n        });\n\n        let spellDescArr = await items.desc.map(function (asdasd) {\n          return asdasd + \" \";\n        });\n\n        let spellDamageKeys = \"\";\n        let spellDamageArr = \"\";\n\n        if (items.damage) {\n          spellDamageArr = Object.values(\n            items.damage.damage_at_slot_level || items.damage_at_character_level\n          );\n          spellDamageKeys = Object.keys(\n            items.damage.damage_at_slot_level || items.damage_at_character_level\n          );\n        }\n\n        const spellInfoData = {\n          spellName: items.name,\n          spellIndex: items.index,\n          spellURL: items.url,\n          spellAOESize: items.area_of_effect?.size || \"\",\n          spellAOEType: items.area_of_effect?.type || \"\",\n          spellDamageKeys: spellDamageKeys || \"\",\n          spellDamage: spellDamageArr || \"\",\n          spellDamageType: items.damage?.damage_type || \"\",\n          spellCastingTime: items.casting_time,\n          spellClasses: spellClassesArr,\n          spellComponents: items.components,\n          spellDesc: spellDescArr,\n          spellDuration: items.duration,\n          spellLevel: items.level,\n          spellMaterial: items.material,\n          spellRange: items.range,\n          spellRitual: items.ritual,\n          spellSchool: items.school.name,\n        };\n        console.log(spellInfoData);\n        spellData.push(spellInfoData);\n      }\n\n      setSpells(spellData);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    getUserSpells();\n  }, []);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteSpell = async (index) => {\n    removeSpellIndex(index);\n    console.log(index);\n    getUserSpells();\n  };\n\n  return (\n    <>\n      <Container>\n        <h2 className=\"pageTitle titleBuffer\">\n          {spells.length\n            ? `Viewing ${spells.length} saved ${\n                spells.length === 1 ? \"spell\" : \"spells\"\n              }:`\n            : \"You have no saved spells!\"}\n        </h2>\n        <CardColumns>\n          {spells.map((spell) => {\n            return (\n              <Card key={spell.spellIndex} border=\"dark\">\n                <Card.Body className=\"card-body\">\n                  <Card.Title className=\"card-title\">\n                    {spell.spellName}\n                  </Card.Title>\n\n                  {spell.spellDamageType && (\n                    <p className=\"card-text\">\n                      Damage Type: {spell.spellDamageType.name}\n                      {\" damage \"}\n                    </p>\n                  )}\n                  {spell.spellAOESize && (\n                    <p className=\"card-text\">\n                      Spell Size: {spell.spellAOESize}\n                      {\" feet \"}\n                      {spell.spellAOEType}\n                    </p>\n                  )}\n\n                  {spell.spellCastingTime && (\n                    <p className=\"card-text\">\n                      Casting Time: {spell.spellCastingTime}\n                    </p>\n                  )}\n                  {spell.spellDuration && (\n                    <p className=\"card-text\">Duration: {spell.spellDuration}</p>\n                  )}\n                  {spell.spellComponents && (\n                    <p className=\"card-text\">\n                      Components: {spell.spellComponents}\n                    </p>\n                  )}\n                  {spell.spellClasses && (\n                    <p className=\"card-text\">Classes: {spell.spellClasses}</p>\n                  )}\n                  {spell.spellSchool && (\n                    <p className=\"card-text\">School: {spell.spellSchool}</p>\n                  )}\n                  {spell.spellMaterial && (\n                    <p className=\"card-text\">\n                      Materials: {spell.spellMaterial}\n                    </p>\n                  )}\n                  {spell.spellRange && (\n                    <p className=\"card-text\">Range: {spell.spellRange}</p>\n                  )}\n                  {spell.spellLevel && (\n                    <p className=\"card-text\">Level: {spell.spellLevel}</p>\n                  )}\n                  {spell.spellDesc && (\n                    <Card.Text className=\"card-text\">\n                      Desc: {spell.spellDesc}\n                    </Card.Text>\n                  )}\n                  {spell.spellDamageKeys && (\n                    <Card.Text className=\"card-text-damage\">Damage</Card.Text>\n                  )}\n                  <Container className=\"damageTable\">\n                    <Row>\n                      <Col className=\"damageCol\">\n                        {spell.spellDamageKeys &&\n                          spell.spellDamageKeys.map((spellDamage) => {\n                            return (\n                              <p className=\"card-text damageText\">\n                                Damage Level: {spellDamage}\n                              </p>\n                            );\n                          })}\n                      </Col>\n                      <Col className=\"damageCol\">\n                        {spell.spellDamage &&\n                          spell.spellDamage.map((spellDamage) => {\n                            return (\n                              <p className=\"card-text damageText\">\n                                Dice: {spellDamage}\n                              </p>\n                            );\n                          })}\n                      </Col>\n                    </Row>\n                  </Container>\n                  <br></br>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteSpell(spell.spellIndex)}\n                  >\n                    Delete this Spell!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":3,"column":34,"nodeType":"47","messageId":"48","endLine":3,"endColumn":39},{"ruleId":"45","severity":1,"message":"49","line":3,"column":41,"nodeType":"47","messageId":"48","endLine":3,"endColumn":44},{"ruleId":"45","severity":1,"message":"50","line":7,"column":10,"nodeType":"47","messageId":"48","endLine":7,"endColumn":19},{"ruleId":"45","severity":1,"message":"51","line":7,"column":21,"nodeType":"47","messageId":"48","endLine":7,"endColumn":33},{"ruleId":"45","severity":1,"message":"52","line":3,"column":3,"nodeType":"47","messageId":"48","endLine":3,"endColumn":12},{"ruleId":"45","severity":1,"message":"53","line":13,"column":3,"nodeType":"47","messageId":"48","endLine":13,"endColumn":18},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'Tab' is defined but never used.","'showModal' is assigned a value but never used.","'setShowModal' is assigned a value but never used.","'Jumbotron' is defined but never used.","'saveSpellIndexs' is defined but never used.","no-global-assign","no-unsafe-negation"]