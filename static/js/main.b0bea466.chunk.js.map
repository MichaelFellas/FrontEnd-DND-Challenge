{"version":3,"sources":["utils/API.js","utils/localStorage.js","pages/SearchSpells.js","pages/SavedSpells.js","components/Navbar.js","App.js","index.js"],"names":["searchDnDAPI","query","fetch","getsavedSpellIndexs","localStorage","getItem","JSON","parse","removeSpellIndex","spellIndex","savedSpellIndexs","updatedsavedSpellIndexs","filter","savedSpellIndex","setItem","stringify","SearchBooks","useState","spells","setSpells","spellInfo","setSpellInfo","dataRequest","response","ok","Error","json","items","spellData","results","map","spell","spellName","name","index","spellURL","url","console","error","setsavedSpellIndexs","useEffect","spellIndexArr","length","removeItem","handleSaveSpells","find","spellToSave","findSpellInfo","classes","asdasd","spellClassesArr","desc","spellDescArr","spellDamageKeys","spellDamageArr","damage","Object","values","damage_at_slot_level","damage_at_character_level","keys","spellInfoData","spellDamage","spellDamageType","damage_type","spellAOESize","area_of_effect","size","spellAOEType","type","spellCastingTime","casting_time","spellClasses","spellComponents","components","spellDesc","spellDuration","duration","spellLevel","level","spellMaterial","material","spellRange","range","spellRitual","ritual","spellSchool","school","log","handleShow","show","setShow","handleClose","Container","className","CardColumns","Card","border","Body","Title","Button","disabled","some","onClick","Modal","onHide","Header","closeButton","Text","Row","Col","Footer","variant","SavedBooks","getUserSpells","i","data","push","handleDeleteSpell","AppNavbar","Navbar","expand","fluid","Brand","as","Link","to","Toggle","Collapse","id","Nav","App","document","body","style","path","element","SearchSpells","SavedSpells","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b0bea466.chunk.js","sourcesContent":["// make a search to DnD 5e api\n// http://www.dnd5eapi.co/\nexport const searchDnDAPI = (query) => {\n  return fetch(`https://www.dnd5eapi.co/api/spells/${query}`);\n};\n\nexport const searchALL = () => {\n  return fetch(`https://www.dnd5eapi.co/api/spells/`);\n};\n","export const getsavedSpellIndexs = () => {\n  const savedSpellIndexs = localStorage.getItem(\"saved_spells\")\n    ? JSON.parse(localStorage.getItem(\"saved_spells\"))\n    : [];\n  return savedSpellIndexs;\n};\n\nexport const saveSpellIndexs = (spellIndexArr) => {\n  if (spellIndexArr.length) {\n    localStorage.setItem(\"saved_spells\", JSON.stringify(spellIndexArr));\n  } else {\n    localStorage.removeItem(\"saved_spells\");\n  }\n};\n\nexport const removeSpellIndex = (spellIndex) => {\n  const savedSpellIndexs = localStorage.getItem(\"saved_spells\")\n    ? JSON.parse(localStorage.getItem(\"saved_spells\"))\n    : null;\n\n  if (!savedSpellIndexs) {\n    return false;\n  }\n\n  const updatedsavedSpellIndexs = savedSpellIndexs?.filter(\n    (savedSpellIndex) => savedSpellIndex !== spellIndex\n  );\n  localStorage.setItem(\"saved_spells\", JSON.stringify(updatedsavedSpellIndexs));\n\n  return true;\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Modal,\n  Button,\n  Card,\n  CardColumns,\n  Col,\n  Row,\n} from \"react-bootstrap\";\nimport { searchALL, searchDnDAPI } from \"../utils/API\";\nimport { saveSpellIndexs, getsavedSpellIndexs } from \"../utils/localStorage\";\n\nconst SearchBooks = () => {\n  const [spells, setSpells] = useState([]);\n  const [spellInfo, setSpellInfo] = useState([]);\n\n  const dataRequest = async () => {\n    try {\n      const response = await searchALL();\n      if (!response.ok) {\n        throw new Error(\"something went wrong!\");\n      }\n      const items = await response.json();\n\n      const spellData = items.results.map((spell) => ({\n        spellName: spell.name,\n        spellIndex: spell.index,\n        spellURL: spell.url,\n      }));\n\n      setSpells(spellData);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const [savedSpellIndexs, setsavedSpellIndexs] = useState(\n    getsavedSpellIndexs()\n  );\n\n  useEffect(() => {\n    return () => saveSpellIndexs(savedSpellIndexs);\n  });\n\n  const handleSaveSpells = async (spellIndex) => {\n    const spellToSave = await spells.find(\n      (spell) => spell.spellIndex === spellIndex\n    );\n\n    setsavedSpellIndexs([...savedSpellIndexs, spellToSave.spellIndex]);\n    setsavedSpellIndexs([...savedSpellIndexs, spellToSave.spellIndex]);\n  };\n\n  const findSpellInfo = async (spellIndex) => {\n    try {\n      const response = await searchDnDAPI(spellIndex);\n      if (!response.ok) {\n        throw new Error(\"something went wrong!\");\n      }\n      const items = await response.json();\n\n      let spellClassesArr = await items.classes.map(function (asdasd) {\n        return asdasd.name + \", \";\n      });\n\n      let spellDescArr = await items.desc.map(function (asdasd) {\n        return asdasd + \" \";\n      });\n\n      let spellDamageKeys = \"\";\n      let spellDamageArr = \"\";\n\n      if (items.damage) {\n        spellDamageArr = Object.values(\n          items.damage.damage_at_slot_level || items.damage_at_character_level\n        );\n        spellDamageKeys = Object.keys(\n          items.damage.damage_at_slot_level || items.damage_at_character_level\n        );\n      }\n      const spellInfoData = {\n        spellName: items.name,\n        spellIndex: items.index,\n        spellURL: items.url,\n        spellDamageKeys: spellDamageKeys || \"\",\n        spellDamage: spellDamageArr || \"\",\n        spellDamageType: items.damage?.damage_type || \"\",\n        spellAOESize: items.area_of_effect?.size || \"\",\n        spellAOEType: items.area_of_effect?.type || \"\",\n        spellCastingTime: items.casting_time,\n        spellClasses: spellClassesArr,\n        spellComponents: items.components,\n        spellDesc: spellDescArr,\n        spellDuration: items.duration,\n        spellLevel: items.level,\n        spellMaterial: items.material,\n        spellRange: items.range,\n        spellRitual: items.ritual,\n        spellSchool: items.school.name,\n      };\n      console.log(spellDamageKeys);\n      setSpellInfo(spellInfoData);\n      handleShow();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    dataRequest();\n  }, []);\n\n  const [show, setShow] = useState(false);\n  const handleShow = () => setShow(true);\n  const handleClose = () => setShow(false);\n\n  return (\n    <>\n      <Container className=\"containerPage\">\n        <br></br>\n        <h2 className=\"pageTitle\">\n          {spells.length\n            ? `Viewing ${spells.length} results:`\n            : \"DnD 5e Spells List\"}\n        </h2>\n\n        <br></br>\n        <CardColumns>\n          {spells.map((spell) => {\n            return (\n              <Card key={spell.spellIndex} border=\"dark\">\n                <Card.Body className=\"card-body\">\n                  <Card.Title className=\"card-title\">\n                    {spell.spellName}\n                  </Card.Title>\n\n                  <Button\n                    disabled={savedSpellIndexs?.some(\n                      (savedSpellIndex) => savedSpellIndex === spell.spellIndex\n                    )}\n                    className=\"btn-block btn-info\"\n                    onClick={() => handleSaveSpells(spell.spellIndex)}\n                  >\n                    {savedSpellIndexs?.some(\n                      (savedSpellIndex) => savedSpellIndex === spell.spellIndex\n                    )\n                      ? \"This spell has already been saved!\"\n                      : \"Save this Spell!\"}\n                  </Button>\n                  <Button\n                    className=\"btn-block btn-info\"\n                    onClick={() => findSpellInfo(spell.spellIndex)}\n                  >\n                    More Information\n                  </Button>\n                  <Modal show={show} onHide={handleClose}>\n                    <Modal.Header closeButton>\n                      <Modal.Title>{spellInfo.spellName}</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                      {spellInfo.spellAOESize && (\n                        <p>\n                          Spell Size: {spellInfo.spellAOESize}\n                          {\" feet \"}\n                          {spellInfo.spellAOEType}\n                        </p>\n                      )}\n\n                      {spellInfo.spellCastingTime && (\n                        <p>Casting Time: {spellInfo.spellCastingTime}</p>\n                      )}\n                      {spellInfo.spellDuration && (\n                        <p>Duration: {spellInfo.spellDuration}</p>\n                      )}\n\n                      {spellInfo.spellComponents && (\n                        <p>Components: {spellInfo.spellComponents}</p>\n                      )}\n                      {spellInfo.spellClasses && (\n                        <p>Classes: {spellInfo.spellClasses}</p>\n                      )}\n\n                      {spellInfo.spellSchool && (\n                        <p>School: {spellInfo.spellSchool}</p>\n                      )}\n                      {spellInfo.spellMaterial && (\n                        <p>Materials: {spellInfo.spellMaterial}</p>\n                      )}\n                      {spellInfo.spellRange && (\n                        <p>Range: {spellInfo.spellRange}</p>\n                      )}\n                      {spellInfo.spellLevel && (\n                        <p>Level: {spellInfo.spellLevel}</p>\n                      )}\n                      {spellInfo.spellDesc && (\n                        <p>Desc: {spellInfo.spellDesc}</p>\n                      )}\n                      {spellInfo.spellDamageKeys && (\n                        <Card.Text className=\"card-text-damage black\">\n                          Damage\n                        </Card.Text>\n                      )}\n                      <Container className=\"damageTable\">\n                        <Row>\n                          <Col className=\"damageCol\">\n                            {spellInfo.spellDamageKeys &&\n                              spellInfo.spellDamageKeys.map((spellDamage) => {\n                                return (\n                                  <p className=\" damageText\">\n                                    Damage Level: {spellDamage}\n                                  </p>\n                                );\n                              })}\n                          </Col>\n                          <Col className=\"damageCol\">\n                            {spellInfo.spellDamage &&\n                              spellInfo.spellDamage.map((spellDamage) => {\n                                return (\n                                  <p className=\" damageText\">\n                                    Dice: {spellDamage}\n                                  </p>\n                                );\n                              })}\n                          </Col>\n                        </Row>\n                      </Container>\n                    </Modal.Body>\n\n                    <Modal.Footer>\n                      <Button onClick={handleClose} variant=\"primary\">\n                        Close\n                      </Button>\n                    </Modal.Footer>\n                  </Modal>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n  Row,\n  Col,\n} from \"react-bootstrap\";\n\nimport {\n  saveSpellIndexs,\n  removeSpellIndex,\n  getsavedSpellIndexs,\n} from \"../utils/localStorage\";\nimport { searchDnDAPI } from \"../utils/API\";\n\nconst SavedBooks = () => {\n  const [spells, setSpells] = useState(getsavedSpellIndexs());\n\n  const getUserSpells = async () => {\n    try {\n      const response = await getsavedSpellIndexs();\n      var spellData = [];\n      for (let i = 0; i < response.length; i++) {\n        let data = await searchDnDAPI(response[i]);\n        const items = await data.json();\n\n        let spellClassesArr = await items.classes.map(function (asdasd) {\n          return asdasd.name + \", \";\n        });\n\n        let spellDescArr = await items.desc.map(function (asdasd) {\n          return asdasd + \" \";\n        });\n\n        let spellDamageKeys = \"\";\n        let spellDamageArr = \"\";\n\n        if (items.damage) {\n          spellDamageArr = Object.values(\n            items.damage.damage_at_slot_level || items.damage_at_character_level\n          );\n          spellDamageKeys = Object.keys(\n            items.damage.damage_at_slot_level || items.damage_at_character_level\n          );\n        }\n\n        const spellInfoData = {\n          spellName: items.name,\n          spellIndex: items.index,\n          spellURL: items.url,\n          spellAOESize: items.area_of_effect?.size || \"\",\n          spellAOEType: items.area_of_effect?.type || \"\",\n          spellDamageKeys: spellDamageKeys || \"\",\n          spellDamage: spellDamageArr || \"\",\n          spellDamageType: items.damage?.damage_type || \"\",\n          spellCastingTime: items.casting_time,\n          spellClasses: spellClassesArr,\n          spellComponents: items.components,\n          spellDesc: spellDescArr,\n          spellDuration: items.duration,\n          spellLevel: items.level,\n          spellMaterial: items.material,\n          spellRange: items.range,\n          spellRitual: items.ritual,\n          spellSchool: items.school.name,\n        };\n        console.log(spellInfoData);\n        spellData.push(spellInfoData);\n      }\n\n      setSpells(spellData);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    getUserSpells();\n  }, []);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteSpell = async (index) => {\n    removeSpellIndex(index);\n    console.log(index);\n    getUserSpells();\n  };\n\n  return (\n    <>\n      <Container>\n        <h2 className=\"pageTitle titleBuffer\">\n          {spells.length\n            ? `Viewing ${spells.length} saved ${\n                spells.length === 1 ? \"spell\" : \"spells\"\n              }:`\n            : \"You have no saved spells!\"}\n        </h2>\n        <CardColumns>\n          {spells.map((spell) => {\n            return (\n              <Card key={spell.spellIndex} border=\"dark\">\n                <Card.Body className=\"card-body\">\n                  <Card.Title className=\"card-title\">\n                    {spell.spellName}\n                  </Card.Title>\n\n                  {spell.spellDamageType && (\n                    <p className=\"card-text\">\n                      Damage Type: {spell.spellDamageType.name}\n                      {\" damage \"}\n                    </p>\n                  )}\n                  {spell.spellAOESize && (\n                    <p className=\"card-text\">\n                      Spell Size: {spell.spellAOESize}\n                      {\" feet \"}\n                      {spell.spellAOEType}\n                    </p>\n                  )}\n\n                  {spell.spellCastingTime && (\n                    <p className=\"card-text\">\n                      Casting Time: {spell.spellCastingTime}\n                    </p>\n                  )}\n                  {spell.spellDuration && (\n                    <p className=\"card-text\">Duration: {spell.spellDuration}</p>\n                  )}\n                  {spell.spellComponents && (\n                    <p className=\"card-text\">\n                      Components: {spell.spellComponents}\n                    </p>\n                  )}\n                  {spell.spellClasses && (\n                    <p className=\"card-text\">Classes: {spell.spellClasses}</p>\n                  )}\n                  {spell.spellSchool && (\n                    <p className=\"card-text\">School: {spell.spellSchool}</p>\n                  )}\n                  {spell.spellMaterial && (\n                    <p className=\"card-text\">\n                      Materials: {spell.spellMaterial}\n                    </p>\n                  )}\n                  {spell.spellRange && (\n                    <p className=\"card-text\">Range: {spell.spellRange}</p>\n                  )}\n                  {spell.spellLevel && (\n                    <p className=\"card-text\">Level: {spell.spellLevel}</p>\n                  )}\n                  {spell.spellDesc && (\n                    <Card.Text className=\"card-text\">\n                      Desc: {spell.spellDesc}\n                    </Card.Text>\n                  )}\n                  {spell.spellDamageKeys && (\n                    <Card.Text className=\"card-text-damage\">Damage</Card.Text>\n                  )}\n                  <Container className=\"damageTable\">\n                    <Row>\n                      <Col className=\"damageCol\">\n                        {spell.spellDamageKeys &&\n                          spell.spellDamageKeys.map((spellDamage) => {\n                            return (\n                              <p className=\"card-text damageText\">\n                                Damage Level: {spellDamage}\n                              </p>\n                            );\n                          })}\n                      </Col>\n                      <Col className=\"damageCol\">\n                        {spell.spellDamage &&\n                          spell.spellDamage.map((spellDamage) => {\n                            return (\n                              <p className=\"card-text damageText\">\n                                Dice: {spellDamage}\n                              </p>\n                            );\n                          })}\n                      </Col>\n                    </Row>\n                  </Container>\n                  <br></br>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteSpell(spell.spellIndex)}\n                  >\n                    Delete this Spell!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar, Nav, Container, Modal, Tab } from \"react-bootstrap\";\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar className=\"navbarBG\" expand=\"lg\">\n        <Container fluid className=\"navbarCont\">\n          <Navbar.Brand className=\"navbarCont\" as={Link} to=\"/\">\n            <h2>DND SPELLS</h2>\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"navbar\" className=\"navbarCont\" />\n          <Navbar.Collapse id=\"navbar\" className=\"navbarCont\">\n            <Nav className=\"ml-auto navbarCont\">\n              <Nav.Link as={Link} to=\"/saved\">\n                <h4>Saved Spells</h4>\n              </Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport SearchSpells from \"./pages/SearchSpells\";\nimport SavedSpells from \"./pages/SavedSpells\";\nimport Navbar from \"./components/Navbar\";\n\nfunction App() {\n  document.body.style = \"background-color: #121212\";\n  return (\n    <Router>\n      <>\n        <Navbar />\n        <Routes>\n          <Route path=\"/FrontEnd-DND-Challenge/\" element={<SearchSpells />} />\n          <Route\n            path=\"/FrontEnd-DND-Challenge/saved\"\n            element={<SavedSpells />}\n          />\n          <Route\n            path=\"*\"\n            element={<h1 className=\"display-2\">Wrong page!</h1>}\n          />\n        </Routes>\n      </>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}